//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\nickv\source\repos\ReceiptLineParser\ReceiptLine.Parser.Grammer\ReceiptLineParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ReceiptLine.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ReceiptLineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, NEWLINE=2, WS=3, HEX=4, PIPE=5, LEFTBRACE=6, RIGHTBRACE=7, 
		SEMICOLON=8, COLON=9, MEMBER=10, CHARS=11;
	public const int
		RULE_file = 0, RULE_document = 1, RULE_lines = 2, RULE_line = 3, RULE_columns = 4, 
		RULE_content = 5, RULE_column = 6, RULE_text = 7, RULE_property = 8, RULE_members = 9;
	public static readonly string[] ruleNames = {
		"file", "document", "lines", "line", "columns", "content", "column", "text", 
		"property", "members"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'|'", "'{'", "'}'", "';'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "NEWLINE", "WS", "HEX", "PIPE", "LEFTBRACE", 
		"RIGHTBRACE", "SEMICOLON", "COLON", "MEMBER", "CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ReceiptLineParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ReceiptLineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ReceiptLineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ReceiptLineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DocumentContext document() {
			return GetRuleContext<DocumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ReceiptLineParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(ReceiptLineParser.BYTE_ORDER_MARK, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 20;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 23;
			document();
			State = 24;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 2, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			lines();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ReceiptLineParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ReceiptLineParser.NEWLINE, i);
		}
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_lines);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 28;
					line();
					State = 29;
					Match(NEWLINE);
					}
					} 
				}
				State = 35;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << PIPE) | (1L << LEFTBRACE) | (1L << CHARS))) != 0)) {
				{
				State = 36;
				line();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ReceiptLineParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ReceiptLineParser.WS, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 39;
				Match(WS);
				}
				break;
			}
			State = 42;
			columns();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 43;
				Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(ReceiptLineParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(ReceiptLineParser.PIPE, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 8, RULE_columns);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				content();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				content();
				State = 48;
				Match(PIPE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(PIPE);
				State = 51;
				content();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				Match(PIPE);
				State = 53;
				content();
				State = 54;
				Match(PIPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column() {
			return GetRuleContext<ColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ReceiptLineParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 10, RULE_content);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				column();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				column();
				State = 60;
				Match(PIPE);
				State = 61;
				content();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ReceiptLineParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ReceiptLineParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 12, RULE_column);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 65;
					Match(WS);
					}
				}

				State = 68;
				text();
				State = 70;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 69;
					Match(WS);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 72;
					Match(WS);
					}
				}

				State = 75;
				property();
				State = 77;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 76;
					Match(WS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARS() { return GetToken(ReceiptLineParser.CHARS, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 14, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(CHARS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(ReceiptLineParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MembersContext members() {
			return GetRuleContext<MembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(ReceiptLineParser.RIGHTBRACE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(LEFTBRACE);
			State = 84;
			members();
			State = 85;
			Match(RIGHTBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(ReceiptLineParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ReceiptLineParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ReceiptLineParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ReceiptLineParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ReceiptLineParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersContext[] members() {
			return GetRuleContexts<MembersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersContext members(int i) {
			return GetRuleContext<MembersContext>(i);
		}
		public MembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_members; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.EnterMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReceiptLineParserListener typedListener = listener as IReceiptLineParserListener;
			if (typedListener != null) typedListener.ExitMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IReceiptLineParserVisitor<TResult> typedVisitor = visitor as IReceiptLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MembersContext members() {
		MembersContext _localctx = new MembersContext(Context, State);
		EnterRule(_localctx, 18, RULE_members);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 87;
				Match(WS);
				}
			}

			State = 90;
			Match(MEMBER);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 91;
				Match(WS);
				}
			}

			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					Match(SEMICOLON);
					State = 95;
					members();
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', 'h', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x5', '\x2', '\x18', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\"', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'%', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '(', '\n', '\x4', '\x3', 
		'\x5', '\x5', '\x5', '+', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '/', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', ';', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x42', '\n', 
		'\a', '\x3', '\b', '\x5', '\b', '\x45', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'I', '\n', '\b', '\x3', '\b', '\x5', '\b', 'L', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'P', '\n', '\b', '\x5', '\b', 
		'R', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', '[', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '_', '\n', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x63', '\n', '\v', '\f', '\v', '\xE', '\v', '\x66', '\v', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 'n', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '#', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', '\x2', 
		'\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'Q', '\x3', '\x2', '\x2', '\x2', '\x10', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'U', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\a', '\x3', '\x2', '\x2', 
		'\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', 
		'\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', '\x3', 
		'\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\x6', 
		'\x4', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x5', '\b', '\x5', '\x2', '\x1F', ' ', '\a', '\x4', '\x2', '\x2', ' ', 
		'\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\'', '\x3', '\x2', 
		'\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\b', 
		'\x5', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '\a', '\x3', '\x2', '\x2', '\x2', ')', '+', 
		'\a', '\x5', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x5', '\n', '\x6', '\x2', '-', '/', '\a', '\x5', '\x2', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', ';', '\x5', '\f', '\a', 
		'\x2', '\x31', '\x32', '\x5', '\f', '\a', '\x2', '\x32', '\x33', '\a', 
		'\a', '\x2', '\x2', '\x33', ';', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\a', '\x2', '\x2', '\x35', ';', '\x5', '\f', '\a', '\x2', '\x36', 
		'\x37', '\a', '\a', '\x2', '\x2', '\x37', '\x38', '\x5', '\f', '\a', '\x2', 
		'\x38', '\x39', '\a', '\a', '\x2', '\x2', '\x39', ';', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x30', '\x3', '\x2', '\x2', '\x2', ':', '\x31', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x34', '\x3', '\x2', '\x2', '\x2', ':', '\x36', '\x3', 
		'\x2', '\x2', '\x2', ';', '\v', '\x3', '\x2', '\x2', '\x2', '<', '\x42', 
		'\x5', '\xE', '\b', '\x2', '=', '>', '\x5', '\xE', '\b', '\x2', '>', '?', 
		'\a', '\a', '\x2', '\x2', '?', '@', '\x5', '\f', '\a', '\x2', '@', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '<', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x42', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x45', '\a', '\x5', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\x10', '\t', '\x2', 'G', 
		'I', '\a', '\x5', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'R', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\a', '\x5', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\x5', '\x12', '\n', '\x2', 'N', 'P', '\a', '\x5', '\x2', '\x2', 
		'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'K', '\x3', '\x2', '\x2', '\x2', 'R', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\r', '\x2', '\x2', 'T', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\a', '\b', '\x2', '\x2', 'V', 'W', '\x5', 
		'\x14', '\v', '\x2', 'W', 'X', '\a', '\t', '\x2', '\x2', 'X', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'Y', '[', '\a', '\x5', '\x2', '\x2', 'Z', 
		'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\a', '\f', '\x2', '\x2', 
		']', '_', '\a', '\x5', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', '\n', '\x2', '\x2', '\x61', '\x63', '\x5', '\x14', 
		'\v', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x11', '\x17', 
		'#', '\'', '*', '.', ':', '\x41', '\x44', 'H', 'K', 'O', 'Q', 'Z', '^', 
		'\x64',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ReceiptLine.Parser
